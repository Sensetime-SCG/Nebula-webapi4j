/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.sensetime.nebula.webapi4j

import com.sensetime.nebula.webapi4j.lib.api.RemoteDataSource
import kotlinx.coroutines.*
import okhttp3.MediaType
import okhttp3.MultipartBody
import okhttp3.RequestBody
import java.io.File
import kotlin.test.Ignore
import kotlin.test.Test

class DeviceTest {

    private var serverUrl: String = System.getProperty("serverUrl")
    private var username: String = System.getProperty("username")
    private var password: String = System.getProperty("password")
    private val request: RemoteDataSource = WebApi(serverUrl, username, password).getEndpoint()

    @Test
    fun testDeviceInfo(): Unit = runBlocking {
        request.deviceInfo().map {
            println(it)
            assert(it.model.length > 8)
            assert(it.device_sn.length > 8)
            assert(it.hw_ver.length > 1)
            assert(it.sw_ver.length > 3)
            assert(it.app_ver.length > 3)
            assert(it.api_ver.length > 3)
        }.mapError {
            assert(false)
        }
    }

    @Test
    fun testDeviceFunctionsConfigGet(): Unit = runBlocking {
        request.deviceFunctionsConfigGet().map {
            println(it)
            assert(true)
        }.mapError {
            println(it.message)
            assert(false)
        }
    }

    @Test
    fun testDeviceCustomConfigGet(): Unit = runBlocking {
        request.deviceCustomConfigGet().map {
            println(it)
            assert(true)
        }.mapError {
            println(it.message)
            assert(false)
        }
    }

    @Test
    fun testDeviceSystemConfigGet(): Unit = runBlocking {
        request.deviceSystemConfigGet().map {
            println(it)
            assert(true)
        }.mapError {
            println(it.message)
            assert(false)
        }
    }


    // ignore this test
    @Ignore
    @Test
    fun testDeviceUpgrade():Unit = runBlocking {
        val firmwarePath = this::class.java.getResource("/pictures/face_Andy-Lau.jpeg")?.path
        assert(firmwarePath != null)
        val part = MultipartBody.Part.createFormData(
            "firmware",
            File(firmwarePath!!).name,
            RequestBody.create(MediaType.parse("multipart/form-data"), File(firmwarePath))
        )
        request.deviceUpgrade(part).map { assert(true) }.mapError {
            println(it.message)
            assert(false)
        }
    }
}
