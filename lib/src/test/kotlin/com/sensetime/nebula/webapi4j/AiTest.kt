/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.sensetime.nebula.webapi4j

import com.sensetime.nebula.webapi4j.lib.*
import com.sensetime.nebula.webapi4j.lib.api.RemoteDataSource
import kotlinx.coroutines.*
import okhttp3.MediaType
import okhttp3.MultipartBody
import okhttp3.RequestBody
import java.io.File
import kotlin.test.Test

class AiTest {
    private val request: RemoteDataSource = WebApi(
        System.getProperty("serverUrl"),
        System.getProperty("username"),
        System.getProperty("password")
    ).getEndpoint()
    private val faceAndyLauPath = this::class.java.getResource("/pictures/face_Andy-Lau.jpeg")?.path
    private val faceWithMaskPath = this::class.java.getResource("/pictures/face_with_mask.jpeg")?.path
    private val faceWithHelmetPath = this::class.java.getResource("/pictures/face_with_helmet.jpeg")?.path

    @Test
    fun testAiRecognitionQuality(): Unit = runBlocking {
        assert(faceAndyLauPath != null)
        assert(faceWithMaskPath != null)
        assert(faceWithHelmetPath != null)

        val partAndylau = MultipartBody.Part.createFormData(
            "image",
            File(faceAndyLauPath!!).name,
            RequestBody.create(MediaType.parse("multipart/form-data"), File(faceAndyLauPath))
        )
        request.aiRecognitionQuality(partAndylau).map {
            assert(it.isNotEmpty())
            assert(it[0].rect.left > 200)
            assert(it[0].rect.right > 300)
            assert(it[0].rect.top > 100)
            assert(it[0].rect.bottom > 300)
            assert(it[0].result.code == 0)
            assert(it[0].result.info == "PASS")
        }.mapError {
            println(it.message)
            assert(false)
        }

        val partWithMask = MultipartBody.Part.createFormData(
            "image",
            File(faceWithMaskPath!!).name,
            RequestBody.create(MediaType.parse("multipart/form-data"), File(faceWithMaskPath))
        )

        request.aiRecognitionQuality(partWithMask).map {
            assert(it.isNotEmpty())
            assert(it[0].rect.left > 200)
            assert(it[0].rect.right > 400)
            assert(it[0].rect.top > 100)
            assert(it[0].rect.bottom > 300)
            assert(it[0].result.code == 80200)
        }.mapError {
            println(it.message)
            assert(false)
        }

        val partWithHelmet = MultipartBody.Part.createFormData(
            "image",
            File(faceWithHelmetPath!!).name,
            RequestBody.create(MediaType.parse("multipart/form-data"), File(faceWithHelmetPath))
        )
        request.aiRecognitionQuality(partWithHelmet).map{
            assert(it.isNotEmpty())
            assert(it[0].rect.left > 100)
            assert(it[0].rect.right > 400)
            assert(it[0].rect.top > 100)
            assert(it[0].rect.bottom > 400)
            assert(it[0].result.code == 80201)
        }.mapError {
            println(it.message)
            assert(false)
        }
    }

    @Test
    fun testAiFeature(): Unit = runBlocking {
        assert(faceAndyLauPath != null)
        assert(faceWithMaskPath != null)
        assert(faceWithHelmetPath != null)
        val partAndylau = MultipartBody.Part.createFormData(
            "image",
            File(faceAndyLauPath!!).name,
            RequestBody.create(MediaType.parse("multipart/form-data"), File(faceAndyLauPath))
        )


        request.aiFeature(partAndylau).map {
            assert(it.length > 1024)
        }.mapError {
            println(it.message)
            assert(false)
        }
    }

}
