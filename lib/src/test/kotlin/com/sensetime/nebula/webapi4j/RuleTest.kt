/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.sensetime.nebula.webapi4j

import com.sensetime.nebula.webapi4j.lib.dto.*
import com.sensetime.nebula.webapi4j.lib.api.RemoteDataSource
import kotlinx.coroutines.*
import kotlin.test.Test

class RuleTest {
    private val request: RemoteDataSource = WebApi(
        System.getProperty("serverUrl"),
        System.getProperty("username"),
        System.getProperty("password")
    ).getEndpoint()
    private val unixMillisTime_2017_07_14 = 1500000000000

    @Test
    fun `test create search update and delete rule`(): Unit = runBlocking {
        val ruleId: Long = 123
        val ruleName = "ruleTestName"
        val onset_point: Long = 1670818332000  // 2022-12-12 12:12:12
        val expire_point: Long = 1672539010000  // 2023-01-01 10:10:10
        var ruleExist = false
        val period: MutableList<ModelRuleSchedulePeriod> = ArrayList<ModelRuleSchedulePeriod>().toMutableList()
        period += ModelRuleSchedulePeriod(
            start_time = ModelRuleSchedulePeriodTime(11, 11, 11),
            end_time = ModelRuleSchedulePeriodTime(22, 22, 22)
        )

        val specialDay: MutableList<ModelRuleScheduleSpecialDay> = ArrayList<ModelRuleScheduleSpecialDay>()
        specialDay += ModelRuleScheduleSpecialDay(
            year = 2022,
            day = 1,
            month = 0,
            today_period = period
        )

        val schedulePeriod = ModelRuleSchedule(
            onset_point = onset_point,
            expire_point = expire_point,
            mon_period = period,
            the_period = emptyList(),
            wed_period = emptyList(),
            thur_period = emptyList(),
            fri_period = emptyList(),
            sat_period = emptyList(),
            sun_period = emptyList(),
            special_days = specialDay
        )
        request.ruleGet(ruleId).map {
            ruleExist = true
        }

        if (ruleExist)
            request.ruleDelete(ruleId).mapError {
                println(it.message)
                assert(false)
            }

        request.ruleCreate(RequestRule(rule_id = ruleId, name = ruleName, schedule = schedulePeriod)).map {
            println(it)
            assert(it.rule_id == ruleId)
            assert(it.name == ruleName)
            assert(it.update_at > unixMillisTime_2017_07_14)
            assert(it.create_at > unixMillisTime_2017_07_14)
            assert(it.schedule.mon_period.size == period.size)
            assert(it.schedule.mon_period[0].start_time == period[0].start_time)
            assert(it.schedule.mon_period[0].end_time == period[0].end_time)
            assert(it.schedule.special_days.size == specialDay.size)
            assert(it.schedule.special_days[0].year == specialDay[0].year)
            assert(it.schedule.special_days[0].day == specialDay[0].day)
            assert(it.schedule.special_days[0].today_period.size == specialDay[0].today_period.size)
            println("create success")
        }.mapError {
            println(it.message)
            assert(false)
        }

        request.ruleSearch(RequestSearchOfName(ruleName)).map {
            assert(it.items.isNotEmpty())
            assert(it.items[0] == ruleId)
        }.mapError {
            println(it.message)
            assert(false)
        }

        request.ruleGet(ruleId).map {
            assert(it.rule_id == ruleId)
            assert(it.name == ruleName)
            assert(it.schedule.mon_period.size == period.size)
            assert(it.schedule.mon_period[0].start_time == period[0].start_time)
            assert(it.schedule.mon_period[0].end_time == period[0].end_time)
            assert(it.schedule.special_days.size == specialDay.size)
            assert(it.schedule.special_days[0].year == specialDay[0].year)
            assert(it.schedule.special_days[0].day == specialDay[0].day)
            assert(it.schedule.special_days[0].today_period.size == specialDay[0].today_period.size)
        }.mapError {
            println(it.message)
            assert(false)
        }

        val newTestRuleName = "newTestRuleName"
        schedulePeriod.mon_period = emptyList()
        request.ruleUpdate(ruleId, RequestRule(ruleId, newTestRuleName, schedulePeriod)).map {
            assert(it.name == newTestRuleName)
            assert(it.schedule.mon_period.isEmpty())
        }.mapError {
            println(it.message)
            assert(false)
        }

        request.rules(0, 10).map {
            println(it)
            assert(it.count != 0)
        }.mapError {
            println(it.message)
            assert(false)
        }

        request.ruleDelete(ruleId).mapError {
            println(it.message)
            assert(false)
        }
    }
}
